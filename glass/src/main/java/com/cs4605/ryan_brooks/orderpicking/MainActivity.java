package com.cs4605.ryan_brooks.orderpicking;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.TextView;

import com.cs4605.ryan_brooks.orderpicking.bluetooth.GlassServerInterface;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    public static final int MESSAGE_READ = 0;
    public static final int MESSAGE_WRITE = 1;

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    private TextView textView;

    private GlassServerInterface btInterface;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        // TODO: Proper layout
        setContentView(R.layout.message_card);

        setupViews();

        setupBluetooth();
//
//        mView = buildView();
//
//        mCardScroller = new CardScrollView(this);
//        mCardScroller.setAdapter(new CardScrollAdapter() {
//            @Override
//            public int getCount() {
//                return 1;
//            }
//
//            @Override
//            public Object getItem(int position) {
//                return mView;
//            }
//
//            @Override
//            public View getView(int position, View convertView, ViewGroup parent) {
//                return mView;
//            }
//
//            @Override
//            public int getPosition(Object item) {
//                if (mView.equals(item)) {
//                    return 0;
//                }
//                return AdapterView.INVALID_POSITION;
//            }
//        });
//        // Handle the TAP event.
//        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
//            @Override
//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//                // Plays disallowed sound to indicate that TAP actions are not supported.
//                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
//                am.playSoundEffect(Sounds.DISALLOWED);
//            }
//        });
    }

    private void setupViews() {
        textView = (TextView) findViewById(R.id.message_textview);
    }

    private void setupBluetooth() {
        // TODO
        btInterface = new GlassServerInterface(handler);
        btInterface.acceptConnection();
    }

    @Override
    protected void onResume() {
        super.onResume();
//        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
//        mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        btInterface.stop();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);
        return card.getView();
    }

    private final Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            Log.d(msg.toString(), msg.arg1 + " : " + msg.arg2);
            switch (msg.what) {
                case MESSAGE_WRITE:
                    byte[] writeBuf = (byte[]) msg.obj;
                    // construct a string from the buffer
                    String writeMessage = new String(writeBuf);
//                    mConversationArrayAdapter.add("Me:  " + writeMessage);
                    break;
                case MESSAGE_READ:
                    byte[] readBuf = (byte[]) msg.obj;
                    // construct a string from the valid bytes in the buffer
                    String readMessage = new String(readBuf, 0, msg.arg1);
                    textView.setText(readMessage);
                    break;
            }
        }
    };

}
